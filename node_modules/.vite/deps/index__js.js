import {
  OBJLoader
} from "./chunk-FLDD5BNV.js";
import {
  OrbitControls
} from "./chunk-H6LP4O7T.js";
import {
  MTLLoader
} from "./chunk-ERPKS2T5.js";
import {
  Box3,
  Color,
  Mesh,
  PerspectiveCamera,
  PointLight,
  Scene,
  TextureLoader,
  Vector3,
  WebGLRenderer
} from "./chunk-BYJ7EWHE.js";

// index.js
var renderer = new WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
var scene = new Scene();
scene.background = new Color(0);
var sceneWidth = 100;
var sceneHeight = 100;
var sceneDepth = 100;
var camera = new PerspectiveCamera(
  45,
  window.innerWidth / window.innerHeight,
  1,
  2e3
);
var sceneCenter = new Vector3(sceneWidth / 2, sceneHeight / 2, sceneDepth / 2);
camera.position.copy(sceneCenter);
var lightOne = new PointLight(12895428, 1, 1e4);
lightOne.position.set(0, 300, 500);
scene.add(lightOne);
var lightTwo = new PointLight(12895428, 1, 1e4);
lightTwo.position.set(500, 100, 0);
scene.add(lightTwo);
var lightThree = new PointLight(12895428, 1, 1e4);
lightThree.position.set(0, 100, -500);
scene.add(lightThree);
var lightFour = new PointLight(12895428, 1, 1e4);
lightFour.position.set(-500, 300, 500);
scene.add(lightFour);
var controls = new OrbitControls(camera, renderer.domElement);
camera.position.set(0, 20, 100);
controls.update();
var mtlLoader = new MTLLoader();
mtlLoader.setPath("./assets/");
mtlLoader.load("aeronave.mtl", (materials) => {
  materials.preload();
  const objLoader = new OBJLoader();
  objLoader.setMaterials(materials);
  objLoader.setPath("./assets/");
  objLoader.load("aeronave.obj", (object) => {
    const objectSize = new Vector3();
    const objectBox = new Box3().setFromObject(object);
    objectBox.getSize(objectSize);
    const maxSize = Math.max(objectSize.x, objectSize.y, objectSize.z);
    const desiredSize = 5;
    const scale = desiredSize / maxSize;
    object.scale.set(scale, scale, scale);
    scene.add(object);
    const textureLoader = new TextureLoader();
    const texture = textureLoader.load("./assets/textura.jpg", (texture2) => {
      object.traverse((child) => {
        if (child instanceof Mesh) {
          child.material.map = texture2;
        }
      });
    });
    const boundingBox = new Box3().setFromObject(object);
    const objectCenter = boundingBox.getCenter(new Vector3());
    object.position.sub(objectCenter);
    const cameraTarget = new Vector3();
    cameraTarget.copy(objectCenter);
    const cameraDistance = Math.max(objectSize.x, objectSize.y) * 2;
    camera.position.x = objectCenter.x;
    camera.position.y = objectCenter.y;
    camera.position.z = objectCenter.z + cameraDistance;
    camera.lookAt(object.position);
  }, (xhr) => {
    console.log(`Carregando objeto: ${xhr.loaded / xhr.total * 100}% carregados`);
  }, (err) => {
    console.log(`Aconteceu um erro: ${err}`);
  });
}, (xhr) => {
  console.log(`Carregando material: ${xhr.loaded / xhr.total * 100}% carregados`);
}, (err) => {
  console.log(`Aconteceu um erro no material: ${err}`);
});
var animate = function animate2() {
  requestAnimationFrame(animate2);
  controls.update();
  renderer.render(scene, camera);
};
animate();
//# sourceMappingURL=index__js.js.map
