{
  "version": 3,
  "sources": ["../../../index.js"],
  "sourcesContent": ["import * as THREE from 'three';\r\nimport { Color } from 'three';\r\nimport { OBJLoader } from 'three/addons/loaders/OBJLoader.js';\r\nimport { OrbitControls } from 'three/addons/controls/OrbitControls.js';\r\nimport { MTLLoader } from 'three/addons/loaders/MTLLoader.js';\r\n\r\nconst renderer = new THREE.WebGLRenderer();\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\ndocument.body.appendChild(renderer.domElement);\r\n\r\nconst scene = new THREE.Scene();\r\nscene.background = new Color(0x000000);\r\nconst sceneWidth = 100;\r\nconst sceneHeight = 100;\r\nconst sceneDepth = 100;\r\n\r\nconst camera = new THREE.PerspectiveCamera(\r\n    45,\r\n    window.innerWidth / window.innerHeight,\r\n    1,\r\n    2000\r\n);\r\n\r\nconst sceneCenter = new THREE.Vector3(sceneWidth / 2, sceneHeight / 2, sceneDepth / 2);\r\ncamera.position.copy(sceneCenter);\r\n\r\nconst lightOne = new THREE.PointLight( 0xc4c4c4, 1, 10000 );\r\nlightOne.position.set( 0, 300, 500 );\r\nscene.add( lightOne );\r\n\r\nconst lightTwo = new THREE.PointLight( 0xc4c4c4, 1, 10000 );\r\nlightTwo.position.set( 500, 100, 0 );\r\nscene.add( lightTwo );\r\n\r\nconst lightThree = new THREE.PointLight( 0xc4c4c4, 1, 10000 );\r\nlightThree.position.set( 0, 100, -500 );\r\nscene.add( lightThree );\r\n\r\nconst lightFour = new THREE.PointLight( 0xc4c4c4, 1, 10000 );\r\nlightFour.position.set( -500, 300, 500 );\r\nscene.add( lightFour );\r\n\r\nconst controls = new OrbitControls(camera, renderer.domElement);\r\ncamera.position.set(0, 20, 100);\r\ncontrols.update();\r\n\r\n\r\nconst mtlLoader = new MTLLoader();\r\nmtlLoader.setPath('./assets/');\r\nmtlLoader.load('aeronave.mtl', (materials) => {\r\n    materials.preload();\r\n    const objLoader = new OBJLoader();\r\n    objLoader.setMaterials(materials);\r\n    objLoader.setPath('./assets/');\r\n\r\n    objLoader.load('aeronave.obj', (object) => {\r\n        const objectSize = new THREE.Vector3();\r\n        const objectBox = new THREE.Box3().setFromObject(object);\r\n        objectBox.getSize(objectSize);\r\n\r\n        // Calcular a escala do objeto com base nas dimensões\r\n        const maxSize = Math.max(objectSize.x, objectSize.y, objectSize.z);\r\n        const desiredSize = 5; // Tamanho desejado para o objeto\r\n        const scale = desiredSize / maxSize;\r\n        \r\n        // Aplicar a escala ao objeto\r\n        object.scale.set(scale, scale, scale);\r\n        scene.add(object);\r\n\r\n        const textureLoader = new THREE.TextureLoader();\r\n        const texture = textureLoader.load('./assets/textura.jpg', (texture) => {\r\n             // Aplique a textura ao material do objeto\r\n            object.traverse((child) => {\r\n                if (child instanceof THREE.Mesh) {\r\n                    child.material.map = texture;\r\n                }\r\n            });\r\n        });\r\n\r\n        \r\n        \r\n        // Centralizar o objeto na cena\r\n        const boundingBox = new THREE.Box3().setFromObject(object);\r\n        const objectCenter = boundingBox.getCenter(new THREE.Vector3());\r\n        object.position.sub(objectCenter);\r\n\r\n        // Ajustar a posição da câmera para apontar para o objeto\r\n        const cameraTarget = new THREE.Vector3();\r\n        cameraTarget.copy(objectCenter);\r\n\r\n        // Ajustar a posição horizontal e vertical da câmera\r\n        // const objectSize = boundingBox.getSize(new THREE.Vector3());\r\n        \r\n        const cameraDistance = Math.max(objectSize.x, objectSize.y) * 2; // Ajuste o multiplicador conforme necessário\r\n        camera.position.x = objectCenter.x;\r\n        camera.position.y = objectCenter.y;\r\n        camera.position.z = objectCenter.z + cameraDistance;\r\n        \r\n        \r\n        camera.lookAt(object.position);\r\n    }, (xhr) => {\r\n        console.log(`Carregando objeto: ${(xhr.loaded / xhr.total) * 100}% carregados`);\r\n    }, (err) => {\r\n        console.log(`Aconteceu um erro: ${err}`);\r\n    });\r\n}, (xhr) => {\r\n    console.log(`Carregando material: ${(xhr.loaded / xhr.total) * 100}% carregados`);\r\n}, (err) => {\r\n    console.log(`Aconteceu um erro no material: ${err}`);\r\n});\r\n\r\n\r\nconst animate = function animate() {\r\n    requestAnimationFrame(animate);\r\n    controls.update();\r\n    renderer.render(scene, camera);\r\n};\r\nanimate();"],
  "mappings": "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",
  "names": ["texture", "animate"]
}
